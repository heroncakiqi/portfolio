{"version":3,"sources":["useWriting.js","Header.js","firebase.js","ProjectItem.js","Projects.js","Footer.js","Content.js","theme/globalStyle.js","App.js","serviceWorker.js","index.js"],"names":["useWriting","text","useState","state","setState","useEffect","interval","setInterval","letterToAdd","length","clearInterval","blink","keyframes","Blinker","styled","span","HeaderStyles","header","Header","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","ItemStyles","div","ProjectItem","item","href","url","target","name","technologies","map","tech","className","description","ProjectsStyles","Projects","useCollectionData","collection","orderBy","value","loading","error","JSON","stringify","key","FooterStyles","Footer","download","ContentStyles","section","Content","GlobalStyle","createGlobalStyle","AppStyles","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4MAiBeA,MAff,SAAoBC,GAAO,IAAD,EACEC,mBAAS,IADX,mBACjBC,EADiB,KACVC,EADU,KAYxB,OAVAC,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3B,IAAMC,EAAcL,EAAMM,OAC1BL,EAAS,GAAD,OAAID,EAAQF,EAAKO,OACxB,IAIH,OAHGL,EAAMM,SAAWR,EAAKQ,QACvBC,cAAcJ,GAET,kBAAMI,cAAcJ,MAC1B,CAACH,EAAOF,IACJ,CAACE,I,gpBCVV,IAAMQ,EAAQC,YAAH,KAeLC,EAAUC,IAAOC,KAAV,IACEJ,GAKTK,EAAeF,IAAOG,OAAV,KA4BHC,MAbf,WACE,IADgB,EAEAlB,EADN,wCACHG,EAFS,oBAGhB,OACE,kBAACa,EAAD,KACE,4BACGb,EACD,kBAACU,EAAD,a,+BCjCRM,IAASC,cAVM,CACbC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIjB,IAEeC,EAFJV,IAASW,Y,4rBCbpB,IAAMC,EAAajB,IAAOkB,IAAV,KAoDDC,MAZf,YAA8B,IAARC,EAAO,EAAPA,KACpB,OACE,kBAACH,EAAD,KACE,gCACE,gCAAK,uBAAGI,KAAMD,EAAKE,IAAKC,OAAO,UAAUH,EAAKI,OAC7CJ,EAAKK,aAAaC,KAAI,SAAAC,GAAI,OAAI,0BAAMC,UAAS,cAASD,IAASA,OAElE,2BAAIP,EAAKS,e,2RC3Cf,IAAMC,EAAiB9B,IAAOkB,IAAV,KAgCLa,MAjBf,WAAqB,IAAD,EACcC,YAC9BhB,EAAUiB,WAAW,YAAYC,QAAQ,aAFzB,mBACXC,EADW,KACJC,EADI,KACKC,EADL,KAIlB,OACE,kBAACP,EAAD,KACE,+CACA,yBAAKF,UAAU,iBACZS,GAAS,0CAAgBC,KAAKC,UAAUF,IACxCD,GAAW,4CACXD,GACCA,EAAMT,KAAI,SAAAN,GAAI,OAAI,kBAAC,EAAD,CAAaoB,IAAKpB,EAAKI,KAAMJ,KAAMA,U,wNC5B/D,IAAMqB,EAAezC,IAAOkB,IAAV,KAwBHwB,MAbf,WACE,OACI,kBAACD,EAAD,KACE,yBAAKb,UAAU,eACb,uBAAGP,KAAK,iCAAiCE,OAAO,UAAS,kBAAC,IAAD,OACzD,uBAAGF,KAAK,+BAA+BE,OAAO,UAAS,kBAAC,IAAD,OACvD,uBAAGF,KAAK,iCAAiCE,OAAO,UAAS,kBAAC,IAAD,OACzD,uBAAGF,KAAK,mBAAmBsB,UAAQ,EAACpB,OAAO,UAAS,kBAAC,IAAD,U,wKClB9D,IAAMqB,EAAgB5C,IAAO6C,QAAV,KAgBJC,MATf,WACE,OACE,kBAACF,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,2XCdC,IAQMG,EAAcC,YAAH,K,mLCJxB,IAAMC,EAAYjD,IAAOkB,IAAV,KAoBAgC,MAZf,WACE,OACE,oCACE,kBAACH,EAAD,MACA,kBAACE,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,SCRUE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4a7485c8.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\r\n\r\nfunction useWriting(text) {\r\n  const [state, setState] = useState('');\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      const letterToAdd = state.length\r\n      setState(`${state + text[letterToAdd]}`);\r\n    }, 50);\r\n    if(state.length === text.length) {\r\n      clearInterval(interval);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [state, text]);\r\n  return [state]\r\n}\r\n\r\nexport default useWriting","import React from \"react\";\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport useWriting from \"./useWriting\";\r\n\r\nconst blink = keyframes`\r\n0% {\r\n  opacity: 0\r\n}\r\n49% {\r\n  opacity: 0;\r\n}\r\n50% {\r\n  opacity: 1;\r\n}\r\n100% {\r\n  opacity: 1;\r\n}\r\n`;\r\n\r\nconst Blinker = styled.span`\r\n  animation: ${blink} 0.5s infinite;\r\n  color: orange;\r\n  position: absolute;\r\n`;\r\n\r\nconst HeaderStyles = styled.header`\r\n  min-height: 80vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  text-align: center;\r\n  overflow: hidden;\r\n  h1 {\r\n    font-weight: 100;\r\n    white-space: pre-line;\r\n    font-family: \"Roboto Mono\", monospace;\r\n  }\r\n`;\r\n\r\nfunction Header() {\r\n  const text = `heron cakiqi \\n full stack developer`;\r\n  const [state] = useWriting(text);\r\n  return (\r\n    <HeaderStyles>\r\n      <h1>\r\n        {state}\r\n        <Blinker>_</Blinker>\r\n      </h1>\r\n    </HeaderStyles>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyDHxs1faDfQ3GiH9IXdtUHXgRWqv9LHb9g\",\r\n  authDomain: \"portfolio-c3e53.firebaseapp.com\",\r\n  databaseURL: \"https://portfolio-c3e53.firebaseio.com\",\r\n  projectId: \"portfolio-c3e53\",\r\n  storageBucket: \"portfolio-c3e53.appspot.com\",\r\n  messagingSenderId: \"827178433379\",\r\n  appId: \"1:827178433379:web:19ce41dae9484beaba3156\",\r\n  measurementId: \"G-LGYCC77T70\"\r\n};\r\nfirebase.initializeApp(config);\r\n\r\nconst db = firebase.firestore();\r\n\r\nexport default db;","import React from 'react'\r\nimport styled from 'styled-components';\r\n\r\nconst ItemStyles = styled.div`\r\n  header {\r\n    display: flex;\r\n    align-items: flex-start;\r\n    h3 {\r\n      margin: 0;\r\n      margin-right: 0.5rem;\r\n      a {\r\n        text-decoration: none\r\n      }\r\n    }\r\n  }\r\n  .tag {\r\n    padding: 5px 10px;\r\n    margin-left: 6px;\r\n    border-radius: 8px;\r\n    font-size: 0.7rem\r\n  }\r\n  .React {\r\n    background-color: #61DAFB;\r\n  }\r\n  .express {\r\n    background-color: #87C643;\r\n  }\r\n  .firebase {\r\n    background-color: #FFCB2B;\r\n  }\r\n  .Redux {\r\n    background-color: #764ABC;\r\n  }\r\n  .jQuery {\r\n    background-color: #0769AD;\r\n  }\r\n  p {\r\n    margin-top: 0.5rem;\r\n    margin-bottom: 1.5rem;\r\n    color: #807E9A;\r\n  }\r\n`\r\n\r\nfunction ProjectItem({item}) {\r\n  return (\r\n    <ItemStyles>\r\n      <header>\r\n        <h3> <a href={item.url} target=\"_blank\">{item.name}</a></h3>\r\n        {item.technologies.map(tech => <span className={`tag ${tech}`}>{tech}</span>)}\r\n      </header>\r\n      <p>{item.description}</p>\r\n    </ItemStyles>\r\n  )\r\n}\r\n\r\nexport default ProjectItem","import React, { useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\r\n\r\nimport firestore from \"./firebase\";\r\nimport ProjectItem from \"./ProjectItem\";\r\n\r\nconst ProjectsStyles = styled.div`\r\n  margin: 0 10px;\r\n  @media (min-width: 1024px) {\r\n    magrgin: 0px;\r\n  }\r\n  h2 {\r\n    margin-bottom: 30px;\r\n    font-size: 1.7rem;\r\n  }\r\n  .projects-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nfunction Projects() {\r\n  const [value, loading, error] = useCollectionData(\r\n    firestore.collection(\"projects\").orderBy(\"priority\")\r\n  );\r\n  return (\r\n    <ProjectsStyles>\r\n      <h2>Latest Projects</h2>\r\n      <div className=\"projects-list\">\r\n        {error && <strong>Error: {JSON.stringify(error)}</strong>}\r\n        {loading && <span>Loading...</span>}\r\n        {value &&\r\n          value.map(item => <ProjectItem key={item.name} item={item} />)}\r\n      </div>\r\n    </ProjectsStyles>\r\n  );\r\n}\r\n\r\nexport default Projects;\r\n","import React from 'react';\r\nimport styled from 'styled-components'; \r\nimport { FaGithub, FaCodepen } from 'react-icons/fa';\r\nimport { AiOutlineProfile, AiOutlineMail } from \"react-icons/ai\";\r\n\r\nconst FooterStyles = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  .icons-group {\r\n    margin: 2rem 0;\r\n    svg {\r\n      margin: 1rem;\r\n    }\r\n  }\r\n`;\r\n\r\nfunction Footer() {\r\n  return (\r\n      <FooterStyles>\r\n        <div className=\"icons-group\">\r\n          <a href=\"https://github.com/heroncakiqi\" target=\"_blank\"><FaGithub /></a>\r\n          <a href=\"mailto:cakiqiheron@gmail.com\" target=\"_blank\"><AiOutlineMail /></a>\r\n          <a href=\"https://codepen.io/heroncakiqi\" target=\"_blank\"><FaCodepen /></a>\r\n          <a href=\"/heroncakiqi.pdf\" download target=\"_blank\"><AiOutlineProfile /></a>\r\n        </div>\r\n      </FooterStyles>\r\n  )\r\n}\r\n\r\nexport default Footer","import React from 'react'\r\nimport styled from 'styled-components';\r\nimport Projects from './Projects';\r\nimport Footer from './Footer';\r\n\r\nconst ContentStyles = styled.section`\r\n  font-family: 'Open Sans', sans-serif;\r\n  width: 100%;\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nfunction Content() {\r\n  return (\r\n    <ContentStyles>\r\n      <Projects />\r\n      <Footer />\r\n    </ContentStyles>\r\n  )\r\n}\r\n\r\nexport default Content;","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const theme1 = {\r\n  primary: '#ff0198',\r\n  secondary: '#01c1d6',\r\n  danger: '#eb238e',\r\n  light: '#f4f4f4',\r\n  dark: '#222'\r\n};\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  @import url('https://fonts.googleapis.com/css?family=Open+Sans|Roboto+Mono&display=swap');\r\n  body {\r\n    padding: 0;\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n    font-size: 16px;\r\n  }\r\n  a {\r\n    color: inherit; /* blue colors for links too */\r\n    text-decoration: inherit; /* no underline */\r\n  }\r\n`;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Header from './Header';\r\nimport Content from './Content';\r\nimport { GlobalStyle } from './theme/globalStyle';\r\n\r\nconst AppStyles = styled.div`\r\n  background-color: #141414;\r\n  color: white;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <AppStyles>\r\n          <Header />\r\n          <Content />\r\n      </AppStyles>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["useWriting.js","Header.js","Projects.js","Contact.js","App.js","serviceWorker.js","index.js"],"names":["useWriting","text","useState","state","setState","useEffect","interval","setInterval","letterToAdd","length","clearInterval","Header","className","id","ProjectsStyles","styled","div","Projects","Contact","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAiBeA,MAff,SAAoBC,GAAO,IAAD,EACEC,mBAAS,IADX,mBACjBC,EADiB,KACVC,EADU,KAYxB,OAVAC,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3B,IAAMC,EAAcL,EAAMM,OAC1BL,EAAS,GAAD,OAAID,EAAQF,EAAKO,OACxB,IAIH,OAHGL,EAAMM,SAAWR,EAAKQ,QACvBC,cAAcJ,GAET,kBAAMI,cAAcJ,MAC1B,CAACH,EAAOF,IACJ,CAACE,ICAKQ,MAXf,WACE,IADgB,EAEAX,EADN,wCACHG,EAFS,oBAIhB,OACM,4BAAQS,UAAU,cAChB,4BAAKT,EAAM,0BAAMU,GAAG,WAAT,Q,o+BCNrB,IAAMC,E,KAAiBC,EAAOC,IAAV,KAoGLC,MAjDf,WACE,OACE,kBAACH,EAAD,KACE,+CACA,yBAAKF,UAAU,iBACb,yBAAKA,UAAU,OACf,gCACE,+CACA,0BAAMA,UAAU,aAAhB,UAEA,gFAEF,yBAAKA,UAAU,OACb,gCACE,2CACA,0BAAMA,UAAU,aAAhB,SACA,0BAAMA,UAAU,aAAhB,SACA,0BAAMA,UAAU,eAAhB,eAEH,4HAED,yBAAKA,UAAU,OACb,gCACE,wCACA,0BAAMA,UAAU,aAAhB,SACA,0BAAMA,UAAU,gBAAhB,aAEF,gFAEF,yBAAKA,UAAU,OACb,gCACE,2CACA,0BAAMA,UAAU,aAAhB,SACA,0BAAMA,UAAU,aAAhB,UAEF,qCAEF,yBAAKA,UAAU,OACf,gCACE,0CACA,0BAAMA,UAAU,cAAhB,WAEF,8CCxFOM,MANf,WACE,OACI,wC,MCaSC,MAVf,WACE,OACE,yBAAKP,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAYQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0022e17c.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\r\n\r\nfunction useWriting(text) {\r\n  const [state, setState] = useState('');\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      const letterToAdd = state.length\r\n      setState(`${state + text[letterToAdd]}`);\r\n    }, 50);\r\n    if(state.length === text.length) {\r\n      clearInterval(interval);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [state, text]);\r\n  return [state]\r\n}\r\n\r\nexport default useWriting","import React, {useEffect, useState} from 'react'\r\nimport useWriting from './useWriting';\r\n\r\nfunction Header() {\r\n  const text = `heron cakiqi \\n full stack developer`\r\n  const [state] = useWriting(text);\r\n\r\n  return (\r\n        <header className=\"App-header\">\r\n          <h1>{state}<span id=\"blinker\">_</span></h1>\r\n        </header>\r\n  )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport styled from 'styled-components';\r\n\r\nconst ProjectsStyles = styled.div`\r\n  width: 100%;\r\n  max-width: 800px;\r\n  display: flex;\r\n  margin: 0 auto;\r\n  flex-direction: column;\r\n  h2 {\r\n    margin-bottom: 30px;\r\n    font-size: 1.7rem;\r\n  }\r\n  .projects-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    header {\r\n      display: flex;\r\n      align-items: flex-start;\r\n      h3 {\r\n        margin: 0;\r\n        margin-right: 8px;\r\n      }\r\n    }\r\n    .app {\r\n      background-color: ;\r\n      .tag {\r\n        padding: 5px 10px;\r\n        margin-left: 6px;\r\n        border-radius: 8px;\r\n        font-size: 0.7rem\r\n      }\r\n      .react {\r\n        background-color: #61DAFB;\r\n      }\r\n      .express {\r\n        background-color: #87C643;\r\n      }\r\n      .firebase {\r\n        background-color: #FFCB2B;\r\n      }\r\n      .redux {\r\n        background-color: #764ABC;\r\n      }\r\n      .jQuery {\r\n        background-color: #0769AD;\r\n      }\r\n      p {\r\n        color: #807E9A;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction Projects() {\r\n  return (\r\n    <ProjectsStyles>\r\n      <h2>Latest Projects</h2>\r\n      <div className=\"projects-list\">\r\n        <div className=\"app\">\r\n        <header>\r\n          <h3>heroncakiqi.com</h3>\r\n          <span className=\"tag react\">React</span>\r\n        </header>\r\n          <p>My personal portofolio website built with React.</p>\r\n        </div>\r\n        <div className=\"app\">\r\n          <header>\r\n            <h3>Voating app</h3>\r\n            <span className=\"tag react\">React</span>\r\n            <span className=\"tag redux\">Redux</span>\r\n            <span className=\"tag express\">express.js</span>\r\n          </header>\r\n         <p>An voating app built with React on the frontend and with express and mongoDb on the backend.</p>\r\n        </div>\r\n        <div className=\"app\">\r\n          <header>\r\n            <h3>Chat app</h3>\r\n            <span className=\"tag react\">React</span>\r\n            <span className=\"tag firebase\">firebase</span>\r\n          </header>\r\n          <p>An live chat app built with React and firestore.</p>\r\n        </div>\r\n        <div className=\"app\">\r\n          <header>\r\n            <h3>Tello clone</h3>\r\n            <span className=\"tag react\">React</span>\r\n            <span className=\"tag redux\">Redux</span>\r\n          </header>\r\n          <p>tello</p>\r\n        </div>\r\n        <div className=\"app\">\r\n        <header>\r\n          <h3>Simon game</h3>\r\n          <span className=\"tag jQuery\">jQuery</span>\r\n        </header>\r\n        <p>Simon game.</p>\r\n        </div>\r\n      </div>\r\n    </ProjectsStyles>\r\n  )\r\n}\r\n\r\nexport default Projects","import React from 'react'\r\n\r\nfunction Contact() {\r\n  return (\r\n      <h2>Contact</h2>\r\n  )\r\n}\r\n\r\nexport default Contact","import React, { useState, useEffect } from 'react';\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\";\nimport Header from './Header';\nimport Projects from './Projects';\nimport Contact from './Contact';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Header />\n        <Projects />\n        <Contact />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}